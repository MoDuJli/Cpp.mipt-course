#include <iostream>
#include <set>
#include <random>

class State{
public:
    virtual bool operator()(int c)  = 0;
};

class SegmentState: public State{
private:
    int beg, end;
public:
    SegmentState(): beg(0), end(-1) { }
    SegmentState(int beg, int end): beg(beg), end(end) { }

    bool operator()(int p)  {
        return (p >= beg) && (p <= end);
    }

};

class DiscreteState: public State{
private:
    int const s;
public:
    DiscreteState(int s): s(s) { }


    bool operator()(int p){
        return p == s;
    }
};

class OrState: public State{
private:
    State &s1, &s2;
public:
    OrState(State &s1, State &s2): s1(s1), s2(s2) { }

    bool operator()(int p){
        return s1(p) or s2(p);
    }
};

class AndState: public State{
private:
    State &s1, &s2;
public:
    AndState(State &s1, State &s2): s1(s1), s2(s2) { }

    bool operator()(int p){
        return s1(p) and s2(p);
    }
};

class NotState: public State{
private:
    State &s;
public:
    NotState(State &s): s(s) { }

    bool operator()(int p){
        return not s(p);
    }
};

class SetState: public State {
private:
    std::set<int> const states;

public:
    SetState(): states() { }
    SetState(std::set<int> const &src): states(src) { }

    bool operator()(int p) {
        return (states.count(p) > 0);
    }
};

class SegmentNoPoints: public State{
private:
    SegmentState seg;
    SetState points;
public:
    SegmentNoPoints(SegmentState &seg, SetState &points): seg(seg), points(points) {}

    bool operator()(int p){
        NotState n(points);
        AndState a(seg, n);
        return a(p);
    }
};

class ProbabilityTest {
private:
    unsigned seed;
    int test_min, test_max;
    unsigned test_count;

public:
    ProbabilityTest(unsigned seed, int test_min, int test_max, unsigned test_count):
            seed(seed), test_min(test_min),test_max(test_max), test_count(test_count) { }

    float operator()(State &s) const {
        std::default_random_engine rng(seed);
        std::uniform_int_distribution<int> dstr(test_min,test_max);
        unsigned good = 0;
        for (unsigned cnt = 0; cnt != test_count; ++cnt)
            if (s(dstr(rng))) ++good;

        return static_cast<float>(good)/static_cast<float>(test_count);
    }

};

int main(int argc, const char * argv[]) {
    DiscreteState d(1);
    SegmentState k(30,80);
    SetState n({1, 3, 5, 7, 21, 35, 53, 60, 90, 99});
    SetState m({1,2, 4, 6, 8, 9, 10, 11, 12, 13, 14, 3, 5, 7, 23, 48, 57, 60, 90, 99});
    SegmentNoPoints a(k, n);

    ProbabilityTest pt(10,0,100,10000000);
    std::cout << pt(a) << std::endl;
    std::cout << pt(k) << std::endl;
    std::cout << pt(n) << std::endl; // 0.098
    std::cout << pt(m) << std::endl; // 0.19(прибавили еще 10 чисел, вероятность увеличилась правильно)

    return 0;
}
